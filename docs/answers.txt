(a)

jlwhi@DESKTOP-1V31G10 MINGW64 ~/Documents/GitHub/assignment2 (master)
$ git commit -m "Added docs folder and status.txt, which holds output of 'git status' command"
[master 5ea0501] Added docs folder and status.txt, which holds output of 'git status' command
 1 file changed, 9 insertions(+)
 create mode 100644 docs/status.txt

jlwhi@DESKTOP-1V31G10 MINGW64 ~/Documents/GitHub/assignment2 (master)
$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 521 bytes | 130.00 KiB/s, done.
Total 4 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/jlwhittaker97/assignment2.git
   d05d987..5ea0501  master -> master

(b) So far, Esteban has made 6 commits, and I have made 3, so there has been 9 total.
    The command I used was: git shortlog

(c) The .gitignore file was last modified Wed Sep 25th 2019 at 18:13:30.
    The command I used was: git log --follow .gitignore

(d) Reasons branches are used in a Git repository:
      1. They are 'cheap', aka they take up very little disk space.
      2.  It allows for editing of the original repository separately, and won't change it until committed.

(e) The git log command is used to list the version history of the current branch, while git status is used to list all the files that have been modified.

(f) git log --follow Vehicle.h

(g) git log --all --grep='file'

(h) 1. Inheritance - This allows new classes to receive, aka 'inherit' properties and methods of existing classes.
    2. Polymorphism - This is the programming language's ability to process objects differently depending on their data type and or class.
    3. Encapsulation - This is the combining of data with the methods that operate on that data. It is also used in hiding the complexity of the internal workings of an object.

(i) The main difference between the "Dictator and Lieutenants" workflow and the "Integration manager" workflow is in "Integration-manager" workflow, the developers are all pushing their changes to the same place (the integration manager).
    However in "Dictator-Lieutenants" workflow, the developers might push to different lieutenants, so there is more of a 'middle man' than the other workflow.

(j) When having 100 developers, the "Dictator-Lieutenants" workflow is much more efficient than the "Centralized" workflow because by allowing the lieutenant to merge changes and solve conflicts. This makes less work for all the developers.
